Creating a Solana smart contract (program) that facilitates an agreement between two users (user1 and user2) for a job and payment involves several steps. Below is a simplified example of how you might implement such a contract using Rust and the Anchor framework, which is a popular framework for building Solana programs.

### Prerequisites
1. **Anchor Framework**: Ensure you have Anchor installed. You can install it using `cargo install --git https://github.com/project-serum/anchor anchor-cli --locked`.
2. **Solana Toolsuite**: Ensure you have the Solana CLI installed.

### Step 1: Set Up the Project
Create a new Anchor project:
```bash
anchor init job_agreement
cd job_agreement
```

### Step 2: Define the Program
In the `programs/job_agreement/src/lib.rs` file, define the logic for the smart contract.

```rust
use anchor_lang::prelude::*;
use anchor_lang::solana_program::system_instruction;

declare_id!("YourProgramIDHere");

#[program]
pub mod job_agreement {
    use super::*;

    // Initialize the job agreement
    pub fn initialize_job(ctx: Context<InitializeJob>, amount: u64) -> ProgramResult {
        let job_account = &mut ctx.accounts.job_account;
        job_account.user1 = *ctx.accounts.user1.key;
        job_account.user2 = *ctx.accounts.user2.key;
        job_account.amount = amount;
        job_account.is_complete = false;
        Ok(())
    }

    // Mark the job as complete and release funds
    pub fn complete_job(ctx: Context<CompleteJob>) -> ProgramResult {
        let job_account = &mut ctx.accounts.job_account;

        // Ensure the job is not already marked as complete
        if job_account.is_complete {
            return Err(ProgramError::Custom(1)); // Custom error for already completed job
        }

        // Ensure user1 has enough funds
        let user1_balance = ctx.accounts.user1.lamports();
        if user1_balance < job_account.amount {
            return Err(ProgramError::Custom(2)); // Custom error for insufficient funds
        }

        // Transfer funds from user1 to user2
        let transfer_instruction = system_instruction::transfer(
            &ctx.accounts.user1.key(),
            &ctx.accounts.user2.key(),
            job_account.amount,
        );
        anchor_lang::solana_program::program::invoke(
            &transfer_instruction,
            &[
                ctx.accounts.user1.to_account_info(),
                ctx.accounts.user2.to_account_info(),
            ],
        )?;

        // Mark the job as complete
        job_account.is_complete = true;

        Ok(())
    }
}

#[derive(Accounts)]
pub struct InitializeJob<'info> {
    #[account(init, payer = user1, space = 8 + 32 + 32 + 8 + 1)]
    pub job_account: Account<'info, JobAccount>,
    pub user1: Signer<'info>,
    pub user2: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct CompleteJob<'info> {
    #[account(mut)]
    pub job_account: Account<'info, JobAccount>,
    #[account(mut)]
    pub user1: Signer<'info>,
    #[account(mut)]
    pub user2: AccountInfo<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct JobAccount {
    pub user1: Pubkey,
    pub user2: Pubkey,
    pub amount: u64,
    pub is_complete: bool,
}
```

### Step 3: Build and Deploy the Program
1. **Build the Program**:
   ```bash
   anchor build
   ```

2. **Deploy the Program**:
   ```bash
   anchor deploy
   ```

### Step 4: Test the Program
You can write tests in the `tests/job_agreement.ts` file to ensure the program works as expected.

```typescript
import * as anchor from '@project-serum/anchor';
import { Program } from '@project-serum/anchor';
import { JobAgreement } from '../target/types/job_agreement';

describe('job_agreement', () => {
  const provider = anchor.Provider.local();
  anchor.setProvider(provider);

  const program = anchor.workspace.JobAgreement as Program<JobAgreement>;

  it('Initializes and completes a job', async () => {
    const jobAccount = anchor.web3.Keypair.generate();
    const user1 = provider.wallet.publicKey;
    const user2 = anchor.web3.Keypair.generate().publicKey;

    // Initialize the job
    await program.rpc.initializeJob(new anchor.BN(100), {
      accounts: {
        jobAccount: jobAccount.publicKey,
        user1: user1,
        user2: user2,
        systemProgram: anchor.web3.SystemProgram.programId,
      },
      signers: [jobAccount],
    });

    // Complete the job
    await program.rpc.completeJob({
      accounts: {
        jobAccount: jobAccount.publicKey,
        user1: user1,
        user2: user2,
        systemProgram: anchor.web3.SystemProgram.programId,
      },
    });

    // Fetch the job account to verify completion
    const job = await program.account.jobAccount.fetch(jobAccount.publicKey);
    assert.ok(job.isComplete);
  });
});
```

### Step 5: Run the Tests
Run the tests to ensure everything works as expected:
```bash
anchor test
```

### Explanation
- **initialize_job**: This function initializes a new job agreement between `user1` and `user2` with a specified payment amount.
- **complete_job**: This function checks if `user1` has enough funds, transfers the agreed amount to `user2`, and marks the job as complete.
- **JobAccount**: This struct holds the state of the job agreement, including the users involved, the payment amount, and whether the job is complete.

### Notes
- This is a simplified example. In a production environment, you would need to handle additional edge cases, security considerations, and possibly add more features like dispute resolution, timeouts, etc.
- Ensure you replace `"YourProgramIDHere"` with the actual program ID after deployment.

This should give you a good starting point for creating a Solana smart contract that handles job agreements and payments.